(()=>{"use strict";class t{constructor(t=["all"]){this.devices=t,this.map={},this.init()}}Object.assign(t.prototype,{process:function(t){let[e,s,i]=t.data;if(e>=176&&e<=191){let t=e-176;console.log("channel:",e-175,"cc:",s,"value:",i),this.map[t].cc[s](i)}else if(e>=144&&e<=159){let t=e-144;this.processNote(t,s,i),this.map[t].note[s](i)}else if(e>=128&&e<=143){let t=e-128;"undefined"==i&&(i=0),this.processNote(t,s,0),this.map[t].noteOff[s](0),this.map[t].note[s](0)}},init:function(){for(let t=0;t<16;t++){this.map[t]={},this.map[t].cc=[],this.map[t].note=[],this.map[t].noteOff=[],this.map[t].noteRange={};for(let e=0;e<128;e++)this.map[t].cc[e]=function(){},this.map[t].note[e]=function(){},this.map[t].noteOff[e]=function(){}}},success:function(t){for(let e of t.inputs.values())e.onmidimessage=this.process.bind(this),console.log("MIDI Mapper listening:",e.name,e)},failure:function(){console.log("No MIDI device available")},listen:function(){navigator.requestMIDIAccess().then(this.success.bind(this),this.failure.bind(this))},assign:function(t,e,s,i){if(16==t)for(let t=0;t<16;t++)this.map[t][e][s]=i;else this.map[t][e][s]=i;return this},assignRange:function(t,e,s){"full"!=e&&"all"!=e||(e="0,127"),this.map[t].noteRange[e]=s},getRanges:function(t,e,s){let i=Object.entries(this.map[t].noteRange).filter((([t,s])=>{let i=t.split(",").map((t=>parseFloat(t)));return e>=i[0]&&e<=i[1]})).map((t=>t[1]));return i},processRange:function(t,e,s){t.forEach((t=>t(e,s)))},processNote:function(t,e,s){this.processRange(this.getRanges(...arguments),e,s)}});const e=t;window.midiMapper=new e})();