doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="initial-scale=1.0, maximum-scale=1.0, width=device-width")
        link(rel="stylesheet" href="./style.css")
        title multitouch-mapper test page: keyboard 
        script(src="./main.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.js")
  
    body
        h1.touch_pickup_ignore multitouch-mapper test page
        select#test.allowDefault
            option test 1
            option testing
        #instrument
            include keyboard
            canvas#cover
        
        script.
            document.querySelector('#test').addEventListener('input',function(e){
                console.log(this.value)
            })
            // some items that can be handled by the ScreenInstrument class in a future demo..
            const synth = new Tone.PolySynth().set({
                    oscillator:{
                        type:'sine2',volume:-16
                        }
                }).toDestination();

            const allOff = function(){
                document.querySelectorAll('.visual').forEach(x=>{
                    x.style.transition = 'all 0.1s ease'
                    x.style.borderWidth='2px'
                    x.style.opacity = 1;
                    });
                
                synth.releaseAll();
            }

            const playNote = function(id, triggerType){
                synth[triggerType](Tone.Frequency(id.replace('sharp','#')).transpose(36));
            }

            // ---------------------------------setup---------------------------------
            
            multitouchMapper
                .listen()
                .addStyles()
                .setDefaultAction(allOff)


    
            // set multiple actions by providing a dictionary as the second argument
            multitouchMapper.setAction('.visual',{
                start: function(element, e, obj){
                    Tone.start(); 
                    playNote(element.id, 'triggerAttack');
                     Object.assign(element.style,{
                        transition: 'all 0.1s ease',
                        borderWidth: '3px',
                        opacity: 0.6
                    })
                },
                enter: function(element, e, obj){
                    Tone.start(); 
                    playNote(element.id, 'triggerAttack');
                     Object.assign(element.style,{
                        transition: 'all 0.1s ease',
                        borderWidth: '3px',
                        opacity: 0.6
                    })
                },
                end: function(element, e, obj){
                    playNote(element.id, 'triggerRelease');
                     Object.assign(element.style,{
                        transition: 'all 0.1s ease',
                        borderWidth: '2px',
                        opacity: 1
                    })
                },
                leave: function(element, e, obj){
                    playNote(element.id, 'triggerRelease');
                     Object.assign(element.style,{
                        transition: 'all 0.1s ease',
                        borderWidth: '2px',
                        opacity: 1
                    })
                }
                //- touch: function(element,e,down,status){
                //-     let triggerType = down ? 'triggerAttack':'triggerRelease';
                //-     Tone.start(); 
                //-     playNote(element.id, triggerType)
                //-     Object.assign(element.style,{
                //-         transition: 'all 0.1s ease',
                //-         borderWidth: down ? '3px' : '2px',
                //-         opacity: down ? 0.9 : 1
                //-     })
                //- }.bind(multitouchMapper),

            })

            // testing a new way of handling events...
            document.addEventListener('touch-pickup',(e)=>{console.log(e.detail)})

            


